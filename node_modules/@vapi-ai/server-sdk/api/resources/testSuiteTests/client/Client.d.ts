/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Vapi from "../../../index";
export declare namespace TestSuiteTests {
    interface Options {
        environment?: core.Supplier<environments.VapiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class TestSuiteTests {
    protected readonly _options: TestSuiteTests.Options;
    constructor(_options: TestSuiteTests.Options);
    /**
     * @param {string} testSuiteId
     * @param {Vapi.TestSuiteTestControllerFindAllPaginatedRequest} request
     * @param {TestSuiteTests.RequestOptions} requestOptions - Request-specific configuration.
     */
    testSuiteTestControllerFindAllPaginated(testSuiteId: string, request?: Vapi.TestSuiteTestControllerFindAllPaginatedRequest, requestOptions?: TestSuiteTests.RequestOptions): Promise<Vapi.TestSuiteTestsPaginatedResponse>;
    /**
     * @param {string} testSuiteId
     * @param {Vapi.TestSuiteTestControllerCreateRequest} request
     * @param {TestSuiteTests.RequestOptions} requestOptions - Request-specific configuration.
     */
    testSuiteTestControllerCreate(testSuiteId: string, request: Vapi.TestSuiteTestControllerCreateRequest, requestOptions?: TestSuiteTests.RequestOptions): Promise<Vapi.TestSuiteTestControllerCreateResponse>;
    /**
     * @param {string} testSuiteId
     * @param {string} id
     * @param {TestSuiteTests.RequestOptions} requestOptions - Request-specific configuration.
     */
    testSuiteTestControllerFindOne(testSuiteId: string, id: string, requestOptions?: TestSuiteTests.RequestOptions): Promise<Vapi.TestSuiteTestControllerFindOneResponse>;
    /**
     * @param {string} testSuiteId
     * @param {string} id
     * @param {TestSuiteTests.RequestOptions} requestOptions - Request-specific configuration.
     */
    testSuiteTestControllerRemove(testSuiteId: string, id: string, requestOptions?: TestSuiteTests.RequestOptions): Promise<Vapi.TestSuiteTestControllerRemoveResponse>;
    /**
     * @param {string} testSuiteId
     * @param {string} id
     * @param {Vapi.TestSuiteTestControllerUpdateRequest} request
     * @param {TestSuiteTests.RequestOptions} requestOptions - Request-specific configuration.
     */
    testSuiteTestControllerUpdate(testSuiteId: string, id: string, request: Vapi.TestSuiteTestControllerUpdateRequest, requestOptions?: TestSuiteTests.RequestOptions): Promise<Vapi.TestSuiteTestControllerUpdateResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
